# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: jnx_addr.proto

from google.protobuf.internal import enum_type_wrapper
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='jnx_addr.proto',
  package='jnxBase',
  syntax='proto3',
  serialized_options=None,
  serialized_pb=b'\n\x0ejnx_addr.proto\x12\x07jnxBase\"F\n\tIpAddress\x12\x15\n\x0b\x61\x64\x64r_string\x18\x01 \x01(\tH\x00\x12\x14\n\naddr_bytes\x18\x02 \x01(\x0cH\x00\x42\x0c\n\nAddrFormat\"G\n\nMacAddress\x12\x15\n\x0b\x61\x64\x64r_string\x18\x01 \x01(\tH\x00\x12\x14\n\naddr_bytes\x18\x02 \x01(\x0cH\x00\x42\x0c\n\nAddrFormat\"(\n\x0cNumericRange\x12\x0b\n\x03min\x18\x01 \x01(\r\x12\x0b\n\x03max\x18\x02 \x01(\r\"=\n\x10NumericRangeList\x12)\n\nrange_list\x18\x01 \x03(\x0b\x32\x15.jnxBase.NumericRange\"\x95\x01\n\x10IpFragementFlags\x12\x11\n\tnot_match\x18\x01 \x01(\x08\x12\r\n\x05match\x18\x02 \x01(\x08\x12\x16\n\x0e\x64ont_fragement\x18\x03 \x01(\x08\x12\x16\n\x0eis_a_fragement\x18\x04 \x01(\x08\x12\x17\n\x0f\x66irst_fragement\x18\x05 \x01(\x08\x12\x16\n\x0elast_fragement\x18\x06 \x01(\x08*6\n\rAddressFormat\x12\x12\n\x0e\x41\x44\x44RESS_STRING\x10\x00\x12\x11\n\rADDRESS_BYTES\x10\x01*C\n\x06\x41\x66Type\x12\x12\n\x0e\x41\x46_UNSPECIFIED\x10\x00\x12\x0b\n\x07\x41\x46_INET\x10\x01\x12\x0c\n\x08\x41\x46_INET6\x10\x02\x12\n\n\x06\x41\x46_MAC\x10\x03*\x89\x02\n\x0bIpProtocols\x12\x12\n\x0eIPPROT_INVALID\x10\x00\x12\x0f\n\x0bIPPROT_ICMP\x10\x01\x12\x0f\n\x0bIPPROT_IGMP\x10\x02\x12\x0f\n\x0bIPPROT_IPIP\x10\x04\x12\x0e\n\nIPPROT_TCP\x10\x06\x12\x0e\n\nIPPROT_EGP\x10\x08\x12\x0e\n\nIPPROT_UDP\x10\x11\x12\x0f\n\x0bIPPROT_RSVP\x10.\x12\x0e\n\nIPPROT_GRE\x10/\x12\x0e\n\nIPPROT_ESP\x10\x32\x12\r\n\tIPPROT_AH\x10\x33\x12\x10\n\x0cIPPROT_ICMP6\x10:\x12\x0f\n\x0bIPPROT_OSPF\x10Y\x12\x0e\n\nIPPROT_PIM\x10g\x12\x10\n\x0bIPPROT_SCTP\x10\x84\x01*\xca\t\n\x07IpPorts\x12\x11\n\rIPPRT_INVALID\x10\x00\x12\x12\n\x0eIPPRT_FTP_DATA\x10\x14\x12\r\n\tIPPRT_FTP\x10\x15\x12\r\n\tIPPRT_SSH\x10\x16\x12\x10\n\x0cIPPRT_TELNET\x10\x17\x12\x0e\n\nIPPRT_SMTP\x10\x19\x12\x10\n\x0cIPPRT_TACACS\x10\x31\x12\x13\n\x0fIPPRT_TACACS_DS\x10\x41\x12\x10\n\x0cIPPRT_DOMAIN\x10\x35\x12\x0e\n\nIPPRT_DHCP\x10\x43\x12\x10\n\x0cIPPRT_BOOTPS\x10\x43\x12\x10\n\x0cIPPRT_BOOTPC\x10\x44\x12\x0e\n\nIPPRT_TFTP\x10\x45\x12\x10\n\x0cIPPRT_FINGER\x10O\x12\x0e\n\nIPPRT_HTTP\x10P\x12\x16\n\x12IPPRT_KERBEROS_SEC\x10X\x12\x0e\n\nIPPRT_POP3\x10n\x12\x10\n\x0cIPPRT_SUNRPC\x10o\x12\x0f\n\x0bIPPRT_IDENT\x10q\x12\x0e\n\nIPPRT_NNTP\x10w\x12\r\n\tIPPRT_NTP\x10{\x12\x15\n\x10IPPRT_NETBIOS_NS\x10\x89\x01\x12\x16\n\x11IPPRT_NETBIOS_DGM\x10\x8a\x01\x12\x16\n\x11IPPRT_NETBIOS_SSN\x10\x8b\x01\x12\x0f\n\nIPPRT_IMAP\x10\x8f\x01\x12\x0f\n\nIPPRT_SNMP\x10\xa1\x01\x12\x13\n\x0eIPPRT_SNMPTRAP\x10\xa2\x01\x12\x10\n\x0bIPPRT_XDMCP\x10\xb1\x01\x12\x0e\n\tIPPRT_BGP\x10\xb3\x01\x12\x0f\n\nIPPRT_LDAP\x10\x85\x03\x12\x19\n\x14IPPRT_MOBILEIP_AGENT\x10\xb2\x03\x12\x15\n\x10IPPRT_MOBILIP_MN\x10\xb3\x03\x12\x0f\n\nIPPRT_MSDP\x10\xff\x04\x12\x10\n\x0bIPPRT_HTTPS\x10\xbb\x03\x12\x0f\n\nIPPRT_SNPP\x10\xbc\x03\x12\x0f\n\nIPPRT_BIFF\x10\x80\x04\x12\x0f\n\nIPPRT_EXEC\x10\x80\x04\x12\x10\n\x0bIPPRT_LOGIN\x10\x81\x04\x12\x0e\n\tIPPRT_WHO\x10\x81\x04\x12\x0e\n\tIPPRT_CMD\x10\x82\x04\x12\x11\n\x0cIPPRT_SYSLOG\x10\x82\x04\x12\x12\n\rIPPRT_PRINTER\x10\x83\x04\x12\x0f\n\nIPPRT_TALK\x10\x85\x04\x12\x10\n\x0bIPPRT_NTALK\x10\x86\x04\x12\x0e\n\tIPPRT_RIP\x10\x88\x04\x12\x10\n\x0bIPPRT_TIMED\x10\x8d\x04\x12\x11\n\x0cIPPRT_KLOGIN\x10\x9f\x04\x12\x11\n\x0cIPPRT_KSHELL\x10\xa0\x04\x12\x0e\n\tIPPRT_LDP\x10\x86\x05\x12\x13\n\x0eIPPRT_KRB_PROP\x10\xf2\x05\x12\x14\n\x0fIPPRT_KRBUPDATE\x10\xf8\x05\x12\x12\n\rIPPRT_KPASSWD\x10\xf9\x05\x12\x10\n\x0bIPPRT_SOCKS\x10\xb8\x08\x12\x0e\n\tIPPRT_AFS\x10\xcb\x0b\x12\x0f\n\nIPPRT_PPTP\x10\xbb\r\x12\x11\n\x0cIPPRT_RADIUS\x10\x94\x0e\x12\x12\n\rIPPRT_RADACCT\x10\x95\x0e\x12\x15\n\x10IPPRT_ZEPHYR_SRV\x10\xb6\x10\x12\x15\n\x10IPPRT_ZEPHYR_CLT\x10\xb7\x10\x12\x14\n\x0fIPPRT_ZEPHYR_HM\x10\xb8\x10\x12\x0f\n\nIPPRT_NFSD\x10\x81\x10\x12\x12\n\rIPPRT_EKLOGIN\x10\xb9\x10\x12\x12\n\rIPPRT_EKSHELL\x10\xba\x10\x12\x11\n\x0cIPPRT_RKINIT\x10\xbc\x10\x12\x15\n\x10IPPRT_CVSPSERVER\x10\xe1\x12\x1a\x02\x10\x01*\xa5\x03\n\x08IcmpType\x12\x17\n\x13ICMP_TYP_ECHO_REPLY\x10\x00\x12\x19\n\x15ICMP_TYP_ECHO_REQUEST\x10\x08\x12\x18\n\x14ICMP_TYP_UNREACHABLE\x10\x03\x12\x1a\n\x16ICMP_TYP_SOURCE_QUENCH\x10\x04\x12\x15\n\x11ICMP_TYP_REDIRECT\x10\x05\x12!\n\x1dICMP_TYP_ROUTER_ADVERTISEMENT\x10\t\x12\x1b\n\x17ICMP_TYP_ROUTER_SOLICIT\x10\n\x12\x1a\n\x16ICMP_TYP_TIME_EXCEEDED\x10\x0b\x12\x1e\n\x1aICMP_TYP_PARAMETER_PROBLEM\x10\x0c\x12\x16\n\x12ICMP_TYP_TIMESTAMP\x10\r\x12\x1c\n\x18ICMP_TYP_TIMESTAMP_REPLY\x10\x0e\x12\x19\n\x15ICMP_TYP_INFO_REQUEST\x10\x0f\x12\x17\n\x13ICMP_TYP_INFO_REPLY\x10\x10\x12\x19\n\x15ICMP_TYP_MASK_REQUEST\x10\x11\x12\x17\n\x13ICMP_TYP_MASK_REPLY\x10\x12*\xb9\x07\n\x08IcmpCode\x12!\n\x1dICMP_CODE_NETWORK_UNREACHABLE\x10\x00\x12\x1e\n\x1aICMP_CODE_HOST_UNREACHABLE\x10\x01\x12\"\n\x1eICMP_CODE_PROTOCOL_UNREACHABLE\x10\x02\x12\x1e\n\x1aICMP_CODE_PORT_UNREACHABLE\x10\x03\x12\"\n\x1eICMP_CODE_FRAGMENTATION_NEEDED\x10\x04\x12!\n\x1dICMP_CODE_SOURCE_ROUTE_FAILED\x10\x05\x12)\n%ICMP_CODE_DESTINATION_NETWORK_UNKNOWN\x10\x06\x12&\n\"ICMP_CODE_DESTINATION_HOST_UNKNOWN\x10\x07\x12\"\n\x1eICMP_CODE_SOURCE_HOST_ISOLATED\x10\x08\x12,\n(ICMP_CODE_DESTINATION_NETWORK_PROHIBITED\x10\t\x12)\n%ICMP_CODE_DESTINATION_HOST_PROHIBITED\x10\n\x12)\n%ICMP_CODE_NETWORK_UNREACHABLE_FOR_TOS\x10\x0b\x12&\n\"ICMP_CODE_HOST_UNREACHABLE_FOR_TOS\x10\x0c\x12\x33\n/ICMP_CODE_COMMUNICATION_PROHIBITED_BY_FILTERING\x10\r\x12\'\n#ICMP_CODE_HOST_PRECEDENCE_VIOLATION\x10\x0e\x12)\n%ICMP_CODE_PRECEDENCE_CUTOFF_IN_EFFECT\x10\x0f\x12\"\n\x1eICMP_CODE_REDIRECT_FOR_NETWORK\x10\x00\x12\x1f\n\x1bICMP_CODE_REDIRECT_FOR_HOST\x10\x01\x12&\n\"ICMP_CODE_REDIRECT_FOR_TOS_AND_NET\x10\x02\x12\'\n#ICMP_CODE_REDIRECT_FOR_TOS_AND_HOST\x10\x03\x12(\n$ICMP_CODE_TTL_EQ_ZERO_DURING_TRANSIT\x10\x00\x12+\n\'ICMP_CODE_TTL_EQ_ZERO_DURING_REASSEMBLY\x10\x01\x12\x1b\n\x17ICMP_CODE_IP_HEADER_BAD\x10\x00\x12%\n!ICMP_CODE_REQUIRED_OPTION_MISSING\x10\x01\x1a\x02\x10\x01*\x89\x01\n\x08TcpFlags\x12\x13\n\x0fTCP_FLG_INVALID\x10\x00\x12\x0f\n\x0bTCP_FLG_FIN\x10\x01\x12\x0f\n\x0bTCP_FLG_SYN\x10\x02\x12\x0f\n\x0bTCP_FLG_RST\x10\x04\x12\x10\n\x0cTCP_FLG_PUSH\x10\x08\x12\x0f\n\x0bTCP_FLG_ACK\x10\x10\x12\x12\n\x0eTCP_FLG_URGENT\x10 *\xad\x01\n\nIpFragment\x12\x1e\n\x1aIP_FRAG_FLOW_DONT_FRAGMENT\x10\x00\x12\x1c\n\x18IP_FRAG_FLOW_IS_FRAGMENT\x10\x01\x12\x1f\n\x1bIP_FRAG_FLOW_FIRST_FRAGMENT\x10\x02\x12\x1e\n\x1aIP_FRAG_FLOW_LAST_FRAGMENT\x10\x03\x12 \n\x1cIP_FRAG_FLOW_IS_NOT_FRAGMENT\x10\x04\x62\x06proto3'
)

_ADDRESSFORMAT = _descriptor.EnumDescriptor(
  name='AddressFormat',
  full_name='jnxBase.AddressFormat',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='ADDRESS_STRING', index=0, number=0,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ADDRESS_BYTES', index=1, number=1,
      serialized_options=None,
      type=None),
  ],
  containing_type=None,
  serialized_options=None,
  serialized_start=429,
  serialized_end=483,
)
_sym_db.RegisterEnumDescriptor(_ADDRESSFORMAT)

AddressFormat = enum_type_wrapper.EnumTypeWrapper(_ADDRESSFORMAT)
_AFTYPE = _descriptor.EnumDescriptor(
  name='AfType',
  full_name='jnxBase.AfType',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='AF_UNSPECIFIED', index=0, number=0,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='AF_INET', index=1, number=1,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='AF_INET6', index=2, number=2,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='AF_MAC', index=3, number=3,
      serialized_options=None,
      type=None),
  ],
  containing_type=None,
  serialized_options=None,
  serialized_start=485,
  serialized_end=552,
)
_sym_db.RegisterEnumDescriptor(_AFTYPE)

AfType = enum_type_wrapper.EnumTypeWrapper(_AFTYPE)
_IPPROTOCOLS = _descriptor.EnumDescriptor(
  name='IpProtocols',
  full_name='jnxBase.IpProtocols',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='IPPROT_INVALID', index=0, number=0,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='IPPROT_ICMP', index=1, number=1,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='IPPROT_IGMP', index=2, number=2,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='IPPROT_IPIP', index=3, number=4,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='IPPROT_TCP', index=4, number=6,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='IPPROT_EGP', index=5, number=8,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='IPPROT_UDP', index=6, number=17,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='IPPROT_RSVP', index=7, number=46,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='IPPROT_GRE', index=8, number=47,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='IPPROT_ESP', index=9, number=50,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='IPPROT_AH', index=10, number=51,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='IPPROT_ICMP6', index=11, number=58,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='IPPROT_OSPF', index=12, number=89,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='IPPROT_PIM', index=13, number=103,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='IPPROT_SCTP', index=14, number=132,
      serialized_options=None,
      type=None),
  ],
  containing_type=None,
  serialized_options=None,
  serialized_start=555,
  serialized_end=820,
)
_sym_db.RegisterEnumDescriptor(_IPPROTOCOLS)

IpProtocols = enum_type_wrapper.EnumTypeWrapper(_IPPROTOCOLS)
_IPPORTS = _descriptor.EnumDescriptor(
  name='IpPorts',
  full_name='jnxBase.IpPorts',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='IPPRT_INVALID', index=0, number=0,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='IPPRT_FTP_DATA', index=1, number=20,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='IPPRT_FTP', index=2, number=21,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='IPPRT_SSH', index=3, number=22,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='IPPRT_TELNET', index=4, number=23,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='IPPRT_SMTP', index=5, number=25,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='IPPRT_TACACS', index=6, number=49,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='IPPRT_TACACS_DS', index=7, number=65,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='IPPRT_DOMAIN', index=8, number=53,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='IPPRT_DHCP', index=9, number=67,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='IPPRT_BOOTPS', index=10, number=67,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='IPPRT_BOOTPC', index=11, number=68,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='IPPRT_TFTP', index=12, number=69,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='IPPRT_FINGER', index=13, number=79,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='IPPRT_HTTP', index=14, number=80,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='IPPRT_KERBEROS_SEC', index=15, number=88,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='IPPRT_POP3', index=16, number=110,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='IPPRT_SUNRPC', index=17, number=111,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='IPPRT_IDENT', index=18, number=113,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='IPPRT_NNTP', index=19, number=119,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='IPPRT_NTP', index=20, number=123,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='IPPRT_NETBIOS_NS', index=21, number=137,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='IPPRT_NETBIOS_DGM', index=22, number=138,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='IPPRT_NETBIOS_SSN', index=23, number=139,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='IPPRT_IMAP', index=24, number=143,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='IPPRT_SNMP', index=25, number=161,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='IPPRT_SNMPTRAP', index=26, number=162,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='IPPRT_XDMCP', index=27, number=177,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='IPPRT_BGP', index=28, number=179,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='IPPRT_LDAP', index=29, number=389,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='IPPRT_MOBILEIP_AGENT', index=30, number=434,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='IPPRT_MOBILIP_MN', index=31, number=435,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='IPPRT_MSDP', index=32, number=639,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='IPPRT_HTTPS', index=33, number=443,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='IPPRT_SNPP', index=34, number=444,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='IPPRT_BIFF', index=35, number=512,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='IPPRT_EXEC', index=36, number=512,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='IPPRT_LOGIN', index=37, number=513,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='IPPRT_WHO', index=38, number=513,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='IPPRT_CMD', index=39, number=514,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='IPPRT_SYSLOG', index=40, number=514,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='IPPRT_PRINTER', index=41, number=515,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='IPPRT_TALK', index=42, number=517,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='IPPRT_NTALK', index=43, number=518,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='IPPRT_RIP', index=44, number=520,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='IPPRT_TIMED', index=45, number=525,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='IPPRT_KLOGIN', index=46, number=543,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='IPPRT_KSHELL', index=47, number=544,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='IPPRT_LDP', index=48, number=646,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='IPPRT_KRB_PROP', index=49, number=754,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='IPPRT_KRBUPDATE', index=50, number=760,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='IPPRT_KPASSWD', index=51, number=761,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='IPPRT_SOCKS', index=52, number=1080,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='IPPRT_AFS', index=53, number=1483,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='IPPRT_PPTP', index=54, number=1723,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='IPPRT_RADIUS', index=55, number=1812,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='IPPRT_RADACCT', index=56, number=1813,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='IPPRT_ZEPHYR_SRV', index=57, number=2102,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='IPPRT_ZEPHYR_CLT', index=58, number=2103,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='IPPRT_ZEPHYR_HM', index=59, number=2104,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='IPPRT_NFSD', index=60, number=2049,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='IPPRT_EKLOGIN', index=61, number=2105,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='IPPRT_EKSHELL', index=62, number=2106,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='IPPRT_RKINIT', index=63, number=2108,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='IPPRT_CVSPSERVER', index=64, number=2401,
      serialized_options=None,
      type=None),
  ],
  containing_type=None,
  serialized_options=b'\020\001',
  serialized_start=823,
  serialized_end=2049,
)
_sym_db.RegisterEnumDescriptor(_IPPORTS)

IpPorts = enum_type_wrapper.EnumTypeWrapper(_IPPORTS)
_ICMPTYPE = _descriptor.EnumDescriptor(
  name='IcmpType',
  full_name='jnxBase.IcmpType',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='ICMP_TYP_ECHO_REPLY', index=0, number=0,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ICMP_TYP_ECHO_REQUEST', index=1, number=8,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ICMP_TYP_UNREACHABLE', index=2, number=3,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ICMP_TYP_SOURCE_QUENCH', index=3, number=4,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ICMP_TYP_REDIRECT', index=4, number=5,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ICMP_TYP_ROUTER_ADVERTISEMENT', index=5, number=9,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ICMP_TYP_ROUTER_SOLICIT', index=6, number=10,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ICMP_TYP_TIME_EXCEEDED', index=7, number=11,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ICMP_TYP_PARAMETER_PROBLEM', index=8, number=12,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ICMP_TYP_TIMESTAMP', index=9, number=13,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ICMP_TYP_TIMESTAMP_REPLY', index=10, number=14,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ICMP_TYP_INFO_REQUEST', index=11, number=15,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ICMP_TYP_INFO_REPLY', index=12, number=16,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ICMP_TYP_MASK_REQUEST', index=13, number=17,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ICMP_TYP_MASK_REPLY', index=14, number=18,
      serialized_options=None,
      type=None),
  ],
  containing_type=None,
  serialized_options=None,
  serialized_start=2052,
  serialized_end=2473,
)
_sym_db.RegisterEnumDescriptor(_ICMPTYPE)

IcmpType = enum_type_wrapper.EnumTypeWrapper(_ICMPTYPE)
_ICMPCODE = _descriptor.EnumDescriptor(
  name='IcmpCode',
  full_name='jnxBase.IcmpCode',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='ICMP_CODE_NETWORK_UNREACHABLE', index=0, number=0,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ICMP_CODE_HOST_UNREACHABLE', index=1, number=1,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ICMP_CODE_PROTOCOL_UNREACHABLE', index=2, number=2,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ICMP_CODE_PORT_UNREACHABLE', index=3, number=3,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ICMP_CODE_FRAGMENTATION_NEEDED', index=4, number=4,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ICMP_CODE_SOURCE_ROUTE_FAILED', index=5, number=5,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ICMP_CODE_DESTINATION_NETWORK_UNKNOWN', index=6, number=6,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ICMP_CODE_DESTINATION_HOST_UNKNOWN', index=7, number=7,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ICMP_CODE_SOURCE_HOST_ISOLATED', index=8, number=8,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ICMP_CODE_DESTINATION_NETWORK_PROHIBITED', index=9, number=9,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ICMP_CODE_DESTINATION_HOST_PROHIBITED', index=10, number=10,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ICMP_CODE_NETWORK_UNREACHABLE_FOR_TOS', index=11, number=11,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ICMP_CODE_HOST_UNREACHABLE_FOR_TOS', index=12, number=12,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ICMP_CODE_COMMUNICATION_PROHIBITED_BY_FILTERING', index=13, number=13,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ICMP_CODE_HOST_PRECEDENCE_VIOLATION', index=14, number=14,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ICMP_CODE_PRECEDENCE_CUTOFF_IN_EFFECT', index=15, number=15,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ICMP_CODE_REDIRECT_FOR_NETWORK', index=16, number=0,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ICMP_CODE_REDIRECT_FOR_HOST', index=17, number=1,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ICMP_CODE_REDIRECT_FOR_TOS_AND_NET', index=18, number=2,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ICMP_CODE_REDIRECT_FOR_TOS_AND_HOST', index=19, number=3,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ICMP_CODE_TTL_EQ_ZERO_DURING_TRANSIT', index=20, number=0,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ICMP_CODE_TTL_EQ_ZERO_DURING_REASSEMBLY', index=21, number=1,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ICMP_CODE_IP_HEADER_BAD', index=22, number=0,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ICMP_CODE_REQUIRED_OPTION_MISSING', index=23, number=1,
      serialized_options=None,
      type=None),
  ],
  containing_type=None,
  serialized_options=b'\020\001',
  serialized_start=2476,
  serialized_end=3429,
)
_sym_db.RegisterEnumDescriptor(_ICMPCODE)

IcmpCode = enum_type_wrapper.EnumTypeWrapper(_ICMPCODE)
_TCPFLAGS = _descriptor.EnumDescriptor(
  name='TcpFlags',
  full_name='jnxBase.TcpFlags',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='TCP_FLG_INVALID', index=0, number=0,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='TCP_FLG_FIN', index=1, number=1,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='TCP_FLG_SYN', index=2, number=2,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='TCP_FLG_RST', index=3, number=4,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='TCP_FLG_PUSH', index=4, number=8,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='TCP_FLG_ACK', index=5, number=16,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='TCP_FLG_URGENT', index=6, number=32,
      serialized_options=None,
      type=None),
  ],
  containing_type=None,
  serialized_options=None,
  serialized_start=3432,
  serialized_end=3569,
)
_sym_db.RegisterEnumDescriptor(_TCPFLAGS)

TcpFlags = enum_type_wrapper.EnumTypeWrapper(_TCPFLAGS)
_IPFRAGMENT = _descriptor.EnumDescriptor(
  name='IpFragment',
  full_name='jnxBase.IpFragment',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='IP_FRAG_FLOW_DONT_FRAGMENT', index=0, number=0,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='IP_FRAG_FLOW_IS_FRAGMENT', index=1, number=1,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='IP_FRAG_FLOW_FIRST_FRAGMENT', index=2, number=2,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='IP_FRAG_FLOW_LAST_FRAGMENT', index=3, number=3,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='IP_FRAG_FLOW_IS_NOT_FRAGMENT', index=4, number=4,
      serialized_options=None,
      type=None),
  ],
  containing_type=None,
  serialized_options=None,
  serialized_start=3572,
  serialized_end=3745,
)
_sym_db.RegisterEnumDescriptor(_IPFRAGMENT)

IpFragment = enum_type_wrapper.EnumTypeWrapper(_IPFRAGMENT)
ADDRESS_STRING = 0
ADDRESS_BYTES = 1
AF_UNSPECIFIED = 0
AF_INET = 1
AF_INET6 = 2
AF_MAC = 3
IPPROT_INVALID = 0
IPPROT_ICMP = 1
IPPROT_IGMP = 2
IPPROT_IPIP = 4
IPPROT_TCP = 6
IPPROT_EGP = 8
IPPROT_UDP = 17
IPPROT_RSVP = 46
IPPROT_GRE = 47
IPPROT_ESP = 50
IPPROT_AH = 51
IPPROT_ICMP6 = 58
IPPROT_OSPF = 89
IPPROT_PIM = 103
IPPROT_SCTP = 132
IPPRT_INVALID = 0
IPPRT_FTP_DATA = 20
IPPRT_FTP = 21
IPPRT_SSH = 22
IPPRT_TELNET = 23
IPPRT_SMTP = 25
IPPRT_TACACS = 49
IPPRT_TACACS_DS = 65
IPPRT_DOMAIN = 53
IPPRT_DHCP = 67
IPPRT_BOOTPS = 67
IPPRT_BOOTPC = 68
IPPRT_TFTP = 69
IPPRT_FINGER = 79
IPPRT_HTTP = 80
IPPRT_KERBEROS_SEC = 88
IPPRT_POP3 = 110
IPPRT_SUNRPC = 111
IPPRT_IDENT = 113
IPPRT_NNTP = 119
IPPRT_NTP = 123
IPPRT_NETBIOS_NS = 137
IPPRT_NETBIOS_DGM = 138
IPPRT_NETBIOS_SSN = 139
IPPRT_IMAP = 143
IPPRT_SNMP = 161
IPPRT_SNMPTRAP = 162
IPPRT_XDMCP = 177
IPPRT_BGP = 179
IPPRT_LDAP = 389
IPPRT_MOBILEIP_AGENT = 434
IPPRT_MOBILIP_MN = 435
IPPRT_MSDP = 639
IPPRT_HTTPS = 443
IPPRT_SNPP = 444
IPPRT_BIFF = 512
IPPRT_EXEC = 512
IPPRT_LOGIN = 513
IPPRT_WHO = 513
IPPRT_CMD = 514
IPPRT_SYSLOG = 514
IPPRT_PRINTER = 515
IPPRT_TALK = 517
IPPRT_NTALK = 518
IPPRT_RIP = 520
IPPRT_TIMED = 525
IPPRT_KLOGIN = 543
IPPRT_KSHELL = 544
IPPRT_LDP = 646
IPPRT_KRB_PROP = 754
IPPRT_KRBUPDATE = 760
IPPRT_KPASSWD = 761
IPPRT_SOCKS = 1080
IPPRT_AFS = 1483
IPPRT_PPTP = 1723
IPPRT_RADIUS = 1812
IPPRT_RADACCT = 1813
IPPRT_ZEPHYR_SRV = 2102
IPPRT_ZEPHYR_CLT = 2103
IPPRT_ZEPHYR_HM = 2104
IPPRT_NFSD = 2049
IPPRT_EKLOGIN = 2105
IPPRT_EKSHELL = 2106
IPPRT_RKINIT = 2108
IPPRT_CVSPSERVER = 2401
ICMP_TYP_ECHO_REPLY = 0
ICMP_TYP_ECHO_REQUEST = 8
ICMP_TYP_UNREACHABLE = 3
ICMP_TYP_SOURCE_QUENCH = 4
ICMP_TYP_REDIRECT = 5
ICMP_TYP_ROUTER_ADVERTISEMENT = 9
ICMP_TYP_ROUTER_SOLICIT = 10
ICMP_TYP_TIME_EXCEEDED = 11
ICMP_TYP_PARAMETER_PROBLEM = 12
ICMP_TYP_TIMESTAMP = 13
ICMP_TYP_TIMESTAMP_REPLY = 14
ICMP_TYP_INFO_REQUEST = 15
ICMP_TYP_INFO_REPLY = 16
ICMP_TYP_MASK_REQUEST = 17
ICMP_TYP_MASK_REPLY = 18
ICMP_CODE_NETWORK_UNREACHABLE = 0
ICMP_CODE_HOST_UNREACHABLE = 1
ICMP_CODE_PROTOCOL_UNREACHABLE = 2
ICMP_CODE_PORT_UNREACHABLE = 3
ICMP_CODE_FRAGMENTATION_NEEDED = 4
ICMP_CODE_SOURCE_ROUTE_FAILED = 5
ICMP_CODE_DESTINATION_NETWORK_UNKNOWN = 6
ICMP_CODE_DESTINATION_HOST_UNKNOWN = 7
ICMP_CODE_SOURCE_HOST_ISOLATED = 8
ICMP_CODE_DESTINATION_NETWORK_PROHIBITED = 9
ICMP_CODE_DESTINATION_HOST_PROHIBITED = 10
ICMP_CODE_NETWORK_UNREACHABLE_FOR_TOS = 11
ICMP_CODE_HOST_UNREACHABLE_FOR_TOS = 12
ICMP_CODE_COMMUNICATION_PROHIBITED_BY_FILTERING = 13
ICMP_CODE_HOST_PRECEDENCE_VIOLATION = 14
ICMP_CODE_PRECEDENCE_CUTOFF_IN_EFFECT = 15
ICMP_CODE_REDIRECT_FOR_NETWORK = 0
ICMP_CODE_REDIRECT_FOR_HOST = 1
ICMP_CODE_REDIRECT_FOR_TOS_AND_NET = 2
ICMP_CODE_REDIRECT_FOR_TOS_AND_HOST = 3
ICMP_CODE_TTL_EQ_ZERO_DURING_TRANSIT = 0
ICMP_CODE_TTL_EQ_ZERO_DURING_REASSEMBLY = 1
ICMP_CODE_IP_HEADER_BAD = 0
ICMP_CODE_REQUIRED_OPTION_MISSING = 1
TCP_FLG_INVALID = 0
TCP_FLG_FIN = 1
TCP_FLG_SYN = 2
TCP_FLG_RST = 4
TCP_FLG_PUSH = 8
TCP_FLG_ACK = 16
TCP_FLG_URGENT = 32
IP_FRAG_FLOW_DONT_FRAGMENT = 0
IP_FRAG_FLOW_IS_FRAGMENT = 1
IP_FRAG_FLOW_FIRST_FRAGMENT = 2
IP_FRAG_FLOW_LAST_FRAGMENT = 3
IP_FRAG_FLOW_IS_NOT_FRAGMENT = 4



_IPADDRESS = _descriptor.Descriptor(
  name='IpAddress',
  full_name='jnxBase.IpAddress',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='addr_string', full_name='jnxBase.IpAddress.addr_string', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=b"".decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='addr_bytes', full_name='jnxBase.IpAddress.addr_bytes', index=1,
      number=2, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=b"",
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
    _descriptor.OneofDescriptor(
      name='AddrFormat', full_name='jnxBase.IpAddress.AddrFormat',
      index=0, containing_type=None, fields=[]),
  ],
  serialized_start=27,
  serialized_end=97,
)


_MACADDRESS = _descriptor.Descriptor(
  name='MacAddress',
  full_name='jnxBase.MacAddress',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='addr_string', full_name='jnxBase.MacAddress.addr_string', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=b"".decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='addr_bytes', full_name='jnxBase.MacAddress.addr_bytes', index=1,
      number=2, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=b"",
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
    _descriptor.OneofDescriptor(
      name='AddrFormat', full_name='jnxBase.MacAddress.AddrFormat',
      index=0, containing_type=None, fields=[]),
  ],
  serialized_start=99,
  serialized_end=170,
)


_NUMERICRANGE = _descriptor.Descriptor(
  name='NumericRange',
  full_name='jnxBase.NumericRange',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='min', full_name='jnxBase.NumericRange.min', index=0,
      number=1, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='max', full_name='jnxBase.NumericRange.max', index=1,
      number=2, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=172,
  serialized_end=212,
)


_NUMERICRANGELIST = _descriptor.Descriptor(
  name='NumericRangeList',
  full_name='jnxBase.NumericRangeList',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='range_list', full_name='jnxBase.NumericRangeList.range_list', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=214,
  serialized_end=275,
)


_IPFRAGEMENTFLAGS = _descriptor.Descriptor(
  name='IpFragementFlags',
  full_name='jnxBase.IpFragementFlags',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='not_match', full_name='jnxBase.IpFragementFlags.not_match', index=0,
      number=1, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='match', full_name='jnxBase.IpFragementFlags.match', index=1,
      number=2, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='dont_fragement', full_name='jnxBase.IpFragementFlags.dont_fragement', index=2,
      number=3, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='is_a_fragement', full_name='jnxBase.IpFragementFlags.is_a_fragement', index=3,
      number=4, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='first_fragement', full_name='jnxBase.IpFragementFlags.first_fragement', index=4,
      number=5, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='last_fragement', full_name='jnxBase.IpFragementFlags.last_fragement', index=5,
      number=6, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=278,
  serialized_end=427,
)

_IPADDRESS.oneofs_by_name['AddrFormat'].fields.append(
  _IPADDRESS.fields_by_name['addr_string'])
_IPADDRESS.fields_by_name['addr_string'].containing_oneof = _IPADDRESS.oneofs_by_name['AddrFormat']
_IPADDRESS.oneofs_by_name['AddrFormat'].fields.append(
  _IPADDRESS.fields_by_name['addr_bytes'])
_IPADDRESS.fields_by_name['addr_bytes'].containing_oneof = _IPADDRESS.oneofs_by_name['AddrFormat']
_MACADDRESS.oneofs_by_name['AddrFormat'].fields.append(
  _MACADDRESS.fields_by_name['addr_string'])
_MACADDRESS.fields_by_name['addr_string'].containing_oneof = _MACADDRESS.oneofs_by_name['AddrFormat']
_MACADDRESS.oneofs_by_name['AddrFormat'].fields.append(
  _MACADDRESS.fields_by_name['addr_bytes'])
_MACADDRESS.fields_by_name['addr_bytes'].containing_oneof = _MACADDRESS.oneofs_by_name['AddrFormat']
_NUMERICRANGELIST.fields_by_name['range_list'].message_type = _NUMERICRANGE
DESCRIPTOR.message_types_by_name['IpAddress'] = _IPADDRESS
DESCRIPTOR.message_types_by_name['MacAddress'] = _MACADDRESS
DESCRIPTOR.message_types_by_name['NumericRange'] = _NUMERICRANGE
DESCRIPTOR.message_types_by_name['NumericRangeList'] = _NUMERICRANGELIST
DESCRIPTOR.message_types_by_name['IpFragementFlags'] = _IPFRAGEMENTFLAGS
DESCRIPTOR.enum_types_by_name['AddressFormat'] = _ADDRESSFORMAT
DESCRIPTOR.enum_types_by_name['AfType'] = _AFTYPE
DESCRIPTOR.enum_types_by_name['IpProtocols'] = _IPPROTOCOLS
DESCRIPTOR.enum_types_by_name['IpPorts'] = _IPPORTS
DESCRIPTOR.enum_types_by_name['IcmpType'] = _ICMPTYPE
DESCRIPTOR.enum_types_by_name['IcmpCode'] = _ICMPCODE
DESCRIPTOR.enum_types_by_name['TcpFlags'] = _TCPFLAGS
DESCRIPTOR.enum_types_by_name['IpFragment'] = _IPFRAGMENT
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

IpAddress = _reflection.GeneratedProtocolMessageType('IpAddress', (_message.Message,), {
  'DESCRIPTOR' : _IPADDRESS,
  '__module__' : 'jnx_addr_pb2'
  # @@protoc_insertion_point(class_scope:jnxBase.IpAddress)
  })
_sym_db.RegisterMessage(IpAddress)

MacAddress = _reflection.GeneratedProtocolMessageType('MacAddress', (_message.Message,), {
  'DESCRIPTOR' : _MACADDRESS,
  '__module__' : 'jnx_addr_pb2'
  # @@protoc_insertion_point(class_scope:jnxBase.MacAddress)
  })
_sym_db.RegisterMessage(MacAddress)

NumericRange = _reflection.GeneratedProtocolMessageType('NumericRange', (_message.Message,), {
  'DESCRIPTOR' : _NUMERICRANGE,
  '__module__' : 'jnx_addr_pb2'
  # @@protoc_insertion_point(class_scope:jnxBase.NumericRange)
  })
_sym_db.RegisterMessage(NumericRange)

NumericRangeList = _reflection.GeneratedProtocolMessageType('NumericRangeList', (_message.Message,), {
  'DESCRIPTOR' : _NUMERICRANGELIST,
  '__module__' : 'jnx_addr_pb2'
  # @@protoc_insertion_point(class_scope:jnxBase.NumericRangeList)
  })
_sym_db.RegisterMessage(NumericRangeList)

IpFragementFlags = _reflection.GeneratedProtocolMessageType('IpFragementFlags', (_message.Message,), {
  'DESCRIPTOR' : _IPFRAGEMENTFLAGS,
  '__module__' : 'jnx_addr_pb2'
  # @@protoc_insertion_point(class_scope:jnxBase.IpFragementFlags)
  })
_sym_db.RegisterMessage(IpFragementFlags)


_IPPORTS._options = None
_ICMPCODE._options = None
# @@protoc_insertion_point(module_scope)
