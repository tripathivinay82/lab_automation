# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import gribi_service_pb2 as gribi__service__pb2


class gRIBIStub(object):
    """gRIBI is a gRPC service which provides an external entity a mechanism through
    which to programmatically inject and remove entries from the system's RIB.
    This is moved to rib_service.japi for now
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Modify = channel.stream_stream(
                '/gribi.gRIBI/Modify',
                request_serializer=gribi__service__pb2.ModifyRequest.SerializeToString,
                response_deserializer=gribi__service__pb2.ModifyResponse.FromString,
                )


class gRIBIServicer(object):
    """gRIBI is a gRPC service which provides an external entity a mechanism through
    which to programmatically inject and remove entries from the system's RIB.
    This is moved to rib_service.japi for now
    """

    def Modify(self, request_iterator, context):
        """Modify provides a bidirectional streaming RPC that can be used to issue
        modifications to the AFT in the form of ModifyRequest(s).
        The network element responds (asynchronously) with a ModifyResponse
        for each ModifyRequest indicating what action was taken, once each
        Operation within the request has been completed.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_gRIBIServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Modify': grpc.stream_stream_rpc_method_handler(
                    servicer.Modify,
                    request_deserializer=gribi__service__pb2.ModifyRequest.FromString,
                    response_serializer=gribi__service__pb2.ModifyResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'gribi.gRIBI', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class gRIBI(object):
    """gRIBI is a gRPC service which provides an external entity a mechanism through
    which to programmatically inject and remove entries from the system's RIB.
    This is moved to rib_service.japi for now
    """

    @staticmethod
    def Modify(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/gribi.gRIBI/Modify',
            gribi__service__pb2.ModifyRequest.SerializeToString,
            gribi__service__pb2.ModifyResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)
